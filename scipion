#!/usr/bin/env python
# **************************************************************************
# *
# * Authors:     J.M. De la Rosa Trevin (jmdelarosa@cnb.csic.es)
# *              I. Foche Perez (ifoche@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'jmdelarosa@cnb.csic.es'
# *
# **************************************************************************
"""
This module is responsible for launching protocol executions.
"""
import sys
import os
from os.path import join, isabs, exists

__version__ = 'v.0.1.5 Phosphorus'


# This script tries to run ok with any python version, but it won't
# work with python 2.4 or below.
if sys.version_info < (2, 5):
    sys.stdout.write('Warning: running with old Python.\n')
    if len(sys.argv) > 1 and sys.argv[1] == 'install':
        sys.exit('Please run this script with Python 2.5 or above.')
    # Because SCons doesn't seem to work with an earlier version!
    # Also, the tarfile module works badly, we have no "with" statement, etc


def __findScipionHome():
    """ Find Scipion home from the __file__ location. 
    It also takes into account the links.
    """
    absPath = os.path.abspath(__file__)
    if os.path.islink(absPath):
        r = os.readlink(absPath)
        if not isabs(absPath):
            absPath = join(os.path.dirname(absPath), r)
        else:
            absPath = r   
    return os.path.dirname(absPath)

SCIPION_HOME = __findScipionHome()


import config

def getConfigPath(varName):
    """ Return the value of varName from config.py, which is a path.
    If relative, prepend SCIPION_HOME.
    """
    pathValue = getattr(config, varName)
    if not isabs(pathValue):
        pathValue = join(SCIPION_HOME, pathValue)
    return pathValue


def getUserDataPath():
    # If SCIPION_USER_DATA is None or empty in config
    # set a location by default in the user home
    if not getattr(config, 'SCIPION_USER_DATA', None):
        return join(os.environ['HOME'], 'ScipionUserData')
    return getConfigPath('SCIPION_USER_DATA')


SCIPION_SOFTWARE = join(SCIPION_HOME, 'software')
SCIPION_BIN = join(SCIPION_SOFTWARE, 'bin')
SCIPION_PATH = os.pathsep.join([join(SCIPION_SOFTWARE, 'bin'),
                               os.environ.get('PATH', ''),
                               ])
XMIPP_LIB = join(getConfigPath('XMIPP_HOME'), 'lib')
SCIPION_LIB = os.pathsep.join([join(SCIPION_SOFTWARE, 'lib'),
                               XMIPP_LIB, 
                               os.environ.get('LD_LIBRARY_PATH', '') # Keep previous value of LD_LIBRARY_PATH
                               ]
                              )
SCIPION_PYTHONPATH = os.pathsep.join([SCIPION_HOME, 
                                      join(SCIPION_SOFTWARE, 'lib', 'python2.7', 'site-packages'),
                                      XMIPP_LIB, 
                                      os.environ.get('PYTHONPATH', '')
                                      ]
                                     )
VARS = {
       'SCIPION_HOME': SCIPION_HOME,
       'SCIPION_APPS': join(SCIPION_HOME, 'pyworkflow', 'apps'),
       'SCIPION_PYTHON': 'python',#join(SCIPION_BIN, 'python'),
       'PATH': SCIPION_PATH,
       'PYTHONPATH': SCIPION_PYTHONPATH,
       'PYTHONHOME': SCIPION_SOFTWARE,
       'LD_LIBRARY_PATH': SCIPION_LIB,
       }

DIRS = {
        'SCIPION_DATA': join(SCIPION_HOME, 'data'),
        'SCIPION_LOGS': join(SCIPION_HOME, 'data', 'logs'),
        'SCIPION_TESTS': join(SCIPION_HOME, 'data', 'tests'),
        'SCIPION_SOFTWARE': SCIPION_SOFTWARE,
        'SCIPION_USER_DATA': getUserDataPath(),
        'SCIPION_TMP': join(getUserDataPath(), 'tmp')
        }

VARS.update(DIRS)

for package in ['XMIPP_HOME', 'SPIDER_DIR', 'EMAN2DIR',
                'CTFFIND_HOME', 'FREALIGN_HOME',
                'RELION_HOME', 'BSOFT_HOME']:
    VARS[package] = getConfigPath(package)
    

def runCmd(cmd):
    os.environ.update(VARS)
    os.chdir(SCIPION_HOME)
    sys.stdout.write(">>>>> %s\n" % cmd)
    result = os.system(cmd)
    if not -256 < result < 256:
        result = 1  # because if not, 256 is confused with 0 !
    sys.exit(result)
        
# The following functions require that SCIPION_PYTHON 
# is sucessfully compiled and installed

def runScript(scriptCmd):
    cmd = '%s %s' % (VARS['SCIPION_PYTHON'], scriptCmd)
    runCmd(cmd)

def runApp(app, args=''):
    runScript('%s %s' % (join(VARS['SCIPION_APPS'], app), args))


MODE_MANAGER = 'manager'
MODE_PROJECT = 'project'
MODE_WEBSERVER = 'webserver'
MODE_COLLECTSTATIC = 'collectstatic'
MODE_TESTS = 'tests'
MODE_TESTS_DATA = 'testdata'
MODE_HELP = 'help'
MODE_DBBROWSE = 'browser'
MODE_VIEWER = 'viewer'
MODE_INSTALL = 'install'
MODE_CONFIG = 'config'
MODE_APACHE_VARS = 'apache_vars'
MODE_VERSION = 'version'
MODE_STATS = 'stats'
MODE_DOWNLOAD = 'download'
MODE_ENV = 'printenv'
MODE_RUN = 'run'



def main():
    n = len(sys.argv)
    if n > 1:
        mode = sys.argv[1]
    else:
        mode = MODE_MANAGER

    # Create SCIPION_HOME folder if it does not exist
    if mode != MODE_INSTALL:
        error = ''
        for d, path in DIRS.items():
            if not exists(path):
                error += "Missing %s folder: '%s'\n" % (d, path)
        if error:
            sys.stdout.write('%s RUN:  scipion install\n' % error)
            sys.exit(1)

    if mode == MODE_MANAGER:
        runApp('pw_manager.py')

    elif mode == MODE_PROJECT:
        if n > 2:
            projectName = sys.argv[2]
            runApp('pw_project.py', args=projectName)

    elif mode == MODE_WEBSERVER:
        if n > 2:
            option = sys.argv[2]
        else:
            option = 'django'

        if option == 'apache_vars':
            # WSGI needs some variables set on apache start (/etc/apache2/envvars):
            #   * SCIPION_HOME: is required to find this script, so it has to be declared "manually" in envvars
            #   * HOME: so it can reach Scipion directory
            #   * LD_LIBRARY_PATH:  set it with a call to this mode. For example,
            #       scipion_ld_library_path=$( ${SCIPION_HOME}/scipion apache_vars)
            #       export LD_LIBRARY_PATH=${scipion_ld_library_path}:${LD_LIBRARY_PATH}
            sys.stdout.write('%s\n' % VARS["LD_LIBRARY_PATH"])
            sys.exit(0)

        elif option in ['django', 'collectstatic']:
            manage = join(SCIPION_HOME, 'pyworkflow', 'web', 'manage.py')
            if option == 'django':
                args = 'runserver 0.0.0.0:8000'
            else:
                args = 'collectstatic'
            runScript('%s %s' % (manage, args))
        else:
            sys.stdout.write("\nERROR: invalid option '%s' for mode %s.\n" % (option, MODE_WEBSERVER))

    elif mode == MODE_TESTS:
        if n <= 2:
            sys.exit('Missing option. Run "%s help" for a full description.'
                     % sys.argv[0])
        testValue = sys.argv[2]

        if not testValue.startswith('-'):
            # Run a single test, the one mentioned in testValue
            if testValue.startswith('tests.'):
                runScript('-m unittest pyworkflow.%s' % testValue)
            else:
                runScript('-m unittest pyworkflow.tests.%s' % testValue)
        else:
            runScript('scripts/run_tests.py %s' % ' '.join(sys.argv[2:]))

    elif mode == MODE_TESTS_DATA:
        runScript('scripts/sync_data.py %s' % ' '.join(sys.argv[2:]))

    # TODO(josemiguel): review and see if we really need it.
    elif mode == MODE_DBBROWSE:
        if n > 2:
            browserArgs = " ".join(sys.argv[2:])
            runApp('pw_browser.py', args=browserArgs)

    elif mode == MODE_VIEWER:
        if n > 2:
            viewerArgs = ' '.join(sys.argv[2:])
            runApp('pw_viewer.py', args=viewerArgs)

    elif mode == MODE_INSTALL:
        # We do not os.environ.update(VARS) here. SCons needs to use
        # the python installed in the system by default.

        # But we do set SCIPION_HOME to avoid picking one from the environment.
        os.environ['SCIPION_HOME'] = SCIPION_HOME

        # Create folders if needed.
        for path in DIRS.values():
            if not exists(path):
                sys.stdout.write("  Creating folder %s ...\n" % path)
                os.makedirs(path)

        args = sys.argv[2:]
        from scripts.install import build
        ret = build(args=args)
        if ret == 0 and '--help' not in args and '-h' not in args:
            runApp('config.py')
        # FIXME: I am not sure this is a good idea. To begin with,
        # right now it expects xmipp to be installed.
        sys.exit(ret)
        
    elif mode == MODE_CONFIG:
        runApp('config.py')
        
    elif mode == MODE_STATS:
        statsDir = join(SCIPION_HOME, 'data', 'stats')
        if not exists(statsDir):
            os.makedirs(statsDir)
        runApp('gitstats/gitstats', args='%s %s' % (SCIPION_HOME, statsDir))

    elif mode == MODE_VERSION:
        sys.stdout.write('%s\n' % __version__)
        sys.exit(0)

    elif mode == 'runprotocol':
        if n == 5:
            params = ['"%s"' % s for s in sys.argv[2:5]]
            args = ' '.join(params)
            runApp('pw_protocol_run.py', args)

    elif mode == MODE_DOWNLOAD:
        if n > 2:
            args = sys.argv[2]
        else:
            args = ''
        runApp('pw_download_packages.py', args)
        
    elif mode == MODE_ENV:
        # Print all the environment variables needed to run scipion.
        for k, v in VARS.items():
            sys.stdout.write('export %s="%s"\n' % (k, v))

        sys.exit(0)
        
    elif mode == MODE_RUN:
        # Run any command with the environment of scipion loaded
        if n > 2:
            cmd = " ".join(sys.argv[2:])
            runCmd(cmd)

    elif mode == MODE_HELP:
        sys.stdout.write("""
USAGE:
    scipion [MODE] [ARGUMENTS]
    where MODE can be:
        browser                Browser a dir or an sqlite database. (TODO: merge with viewer)

        help                   Print this help message.

        install                Create needed folders and settings to run Scipion.
        
        config                 Write default configuration.

        manager                Open the manager with list of all projects.

        project [PROJECT_NAME] Open the specified project, special name 'last' can be used. 

        stats                  Write git statistics to data/stats folder.

        tests [OPTION]         Run a test starting from pyworkflow.tests
                               OPTION can be:
                                  <test name>: name of the test to run.
                                  --show: list the available tests.
                                  Further options are:
                                  --case=VALUE --paths=VALUE --pattern="test*py" --mode=[modules|classes|all]

        testdata [OPTION]      Synchronize tests data from/to remote server to/from SCIPION_USER_DATA folder.
                               OPTION can be:
                                  --download: copy dataset from remote location to local
                                  --upload: copy dataset from local to remote
                                  --format: create a MANIFEST file with md5 checksums (expected in dataset folders)
                                  dataset: name of dataset to download, upload or format
                                  --list: list the datasets in the local computer and in the remote server
                                  --query: Show modifications stored in last_m.txt and update modifications log file.
                                           This can be used, for example, by buildbot to know when to launch tests.
                               For example, to download the dataset xmipp_tutorial:
                                  scipion testsdata --download xmipp_tutorial
                               Or to upload it:
                                  scipion testsdata --upload xmipp_tutorial

        viewer [FILE]          Open a file with Scipion showj program.

        webserver [OPTION]     webserver management OPTION can be:
                               django: open local django webserver (default)
                               collectstatic: copy static files for django server
                               apache_vars: show the LD_LIBRARY_PATH needed by apache server
                               
        printenv               Print the environmental variables used by the application 

        download               Download external packages (EMAN, SPIDER, Relion, etc)
        
        run ARG1 [ARG2...ARGN] Run any command with arguments setting the scipion environment
""")
        sys.exit(0)

    # If we reach this point, bad arguments were passed
    sys.stdout.write("""Unknown mode: %s
Valid modes are:
  browser help install manager project stats tests testdata viewer webserver printenv download
Run "%s help" for a full description.\n""" % (sys.argv[1], sys.argv[0]))
    sys.exit(1)



if __name__ == '__main__':
    main()
        
elif __name__.startswith('_mod_wsgi'):
    os.environ['DJANGO_SETTINGS_MODULE'] = 'pages.settings'
    os.environ.update(VARS)
    # !!!! reuse VARS for these sys.path too
    sys.path.append(join(XMIPP_HOME, 'lib'))
    sys.path.append(join(XMIPP_HOME, 'lib', 'python2.7', 'site-packages'))
    sys.path.append(join(XMIPP_HOME, 'protocols'))
    # sys.path.append(xmipp_home + '/applications/tests/pythonlib')

    pages_settings_path = join(SCIPION_HOME,'pyworkflow','web')
    if not pages_settings_path in sys.path:
        sys.path.append(pages_settings_path)
    
    import django.core.handlers.wsgi
    
    # default name for the function that WSGI calls is "application"
    # you can change it wsgi.conf
    application = django.core.handlers.wsgi.WSGIHandler()
