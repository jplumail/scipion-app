#!/usr/bin/env python
# **************************************************************************
# *
# * Authors:     J.M. De la Rosa Trevin (jmdelarosa@cnb.csic.es)
# *              I. Foche Perez (ifoche@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'jmdelarosa@cnb.csic.es'
# *
# **************************************************************************
"""
Main entry point to scipion. It launches the gui, tests, etc.
"""
import sys
import os
from os.path import join, exists, dirname
import time
try:
    from ConfigParser import ConfigParser
except ImportError:
    from configparser import ConfigParser  # Python 3


__version__ = 'v.0.1.5 Phosphorus'


# This script tries to run ok with any python version. So we cannot
# use some of the cool syntax of modern Python (no "with" statement,
# no inline "if ... else ...", etc.), and we better avoid things like
# "print" (we use sys.stdout.write()) and be careful with exceptions.

if sys.version_info < (2, 5):
    sys.stdout.write('Warning: running with old Python.\n')
    # But we'll try anyway. Unless...

    if len(sys.argv) > 1 and sys.argv[1] == 'install':
        sys.exit('Please run this script with Python 2.5 or above.')
        # That's too much, because SCons doesn't work with an earlier version!
        # Also, the tarfile module works badly, etc. Not worth it.


SCIPION_HOME = dirname(os.path.realpath(__file__))


#
# If we don't have a local user installation, create it.
#

CONF_FILE = os.path.expanduser('~/.config/scipion/scipion.conf')

def createConf():
    if not exists(dirname(CONF_FILE)):
        os.makedirs(dirname(CONF_FILE))
    if exists(CONF_FILE):
        backup = '%s.%d' % (CONF_FILE, int(time.time()))
        sys.stdout.write('File %s already exists. Creating backup %s.\n' %
                         (CONF_FILE, backup))
        os.rename(CONF_FILE, backup)
    open(CONF_FILE, 'w').write("""
# All relative paths will have $SCIPION_HOME as their root.

[DIRS_LOCAL]
SCIPION_USER_DATA = ~/ScipionUserData
SCIPION_LOGS = %(SCIPION_USER_DATA)s/logs
SCIPION_TMP = %(SCIPION_USER_DATA)s/tmp

[DIRS_GLOBAL]
SCIPION_TESTS = data/tests
SCIPION_SOFTWARE = software

[PACKAGES]
EM_ROOT = software/em
XMIPP_HOME = %(EM_ROOT)s/xmipp
SPIDER_DIR = %(EM_ROOT)s/spider/spider
EMAN2DIR = %(EM_ROOT)s/eman
FREALIGN_HOME = %(EM_ROOT)s/frealign
CTFFIND_HOME = %(EM_ROOT)s/ctffind
RELION_HOME = %(EM_ROOT)s/relion
BSOFT_HOME = %(EM_ROOT)s/bsoft
""")


#
# Initialize variables from config file.
#

try:
    if not exists(CONF_FILE):
        sys.stdout.write('Creating local configuration file: %s\n' % CONF_FILE)
        createConf()

    config = ConfigParser()
    config.optionxform = str  # keep case (stackoverflow.com/questions/1611799)
    assert config.read(CONF_FILE) != [], 'Missing file %s' % CONF_FILE

    def getPaths(section):
        return {key: join(SCIPION_HOME, os.path.expanduser(path))
                for key, path in config.items(section)}
    DIRS_GLOBAL = getPaths('DIRS_GLOBAL')
    DIRS_LOCAL = getPaths('DIRS_LOCAL')
    PACKAGES = getPaths('PACKAGES')

    for d in DIRS_LOCAL.values():
        if not exists(d):
            sys.stdout.write('Creating directory %s ...\n' % d)
            os.makedirs(d)

    SCIPION_SOFTWARE = DIRS_GLOBAL['SCIPION_SOFTWARE']
    XMIPP_LIB = join(PACKAGES['XMIPP_HOME'], 'lib')
except Exception:
    # This way of catching exceptions works with Python 2 & 3
    sys.stderr.write('Error: %s\n' % sys.exc_info()[1])
    try:
        sys.stdout.write('Trying to rewrite %s\n' % CONF_FILE)
        createConf()  # try to create a working configuration file
    except Exception:
        pass  # but don't be upset if we can't :)
    sys.stdout.write('Please check the configuration file %s and try again.\n' %
                     CONF_FILE)
    sys.exit(1)

PATH = os.pathsep.join(
    [join(SCIPION_SOFTWARE, 'bin'),
     os.environ.get('PATH', '')]
)
LD_LIBRARY_PATH = os.pathsep.join(
    [join(SCIPION_SOFTWARE, 'lib'),
     XMIPP_LIB,
     os.environ.get('LD_LIBRARY_PATH', '')]
)
PYTHONPATH = os.pathsep.join(
    [SCIPION_HOME,
     join(SCIPION_SOFTWARE, 'lib', 'python2.7', 'site-packages'),
     XMIPP_LIB,
     os.environ.get('PYTHONPATH', '')]
)

# VARS will contain all the relevant environment variables, including
# directories and packages.
VARS = {
    'SCIPION_HOME': SCIPION_HOME,
    'SCIPION_APPS': join(SCIPION_HOME, 'pyworkflow', 'apps'),
    'SCIPION_PYTHON': 'python',
    'PATH': PATH,
    'PYTHONPATH': PYTHONPATH,
    'LD_LIBRARY_PATH': LD_LIBRARY_PATH,
}

VARS.update(DIRS_GLOBAL)
VARS.update(DIRS_LOCAL)
VARS.update(PACKAGES)


#
# Auxiliary functions to run commands in our environment, one of our
# scripts, or one of our "apps"
#

def runCmd(cmd):
    os.environ.update(VARS)
    os.chdir(SCIPION_HOME)
    sys.stdout.write(">>>>> %s\n" % cmd)
    result = os.system(cmd)
    if not -256 < result < 256:
        result = 1  # because if not, 256 is confused with 0 !
    sys.exit(result)

# The following functions require a working SCIPION_PYTHON

def runScript(scriptCmd):
    cmd = '%s %s' % (VARS['SCIPION_PYTHON'], scriptCmd)
    runCmd(cmd)

def runApp(app, args=''):
    runScript('%s %s' % (join(VARS['SCIPION_APPS'], app), args))


#
# If this is the first time that the user runs scipion...
#
if not exists(join(DIRS_LOCAL['SCIPION_USER_DATA'], 'settings.sqlite')):
    os.environ['SCIPION_USER_DATA'] = VARS['SCIPION_USER_DATA']
    os.environ['SCIPION_PYTHON'] = VARS['SCIPION_PYTHON']
    try:
        from pyworkflow.apps.config import writeDefaults
        writeDefaults()
    except Exception:  # we expect a ImportError due to no psutil
        if len(sys.argv) < 2 or sys.argv[1] != 'install':
            sys.exit('%s\nDid you already run "%s install" ?' %
                     (sys.exc_info()[1], sys.argv[0]))
        else:
            pass  # go ahead, install it!


#
# Modes (first argument given to scipion).
#

MODE_MANAGER = 'manager'
MODE_PROJECT = 'project'
MODE_LAST = 'last' # shortcut to 'project last'
MODE_WEBSERVER = 'webserver'
MODE_COLLECTSTATIC = 'collectstatic'
MODE_TESTS = 'tests' # keep tests for compatibility
MODE_TEST = 'test' # also allow 'test', in singular
MODE_TEST_DATA = 'testdata'
MODE_HELP = 'help'
MODE_DBBROWSE = 'browser'
MODE_VIEWER = 'viewer'
MODE_INSTALL = 'install'
MODE_CONFIG = 'config'
MODE_APACHE_VARS = 'apache_vars'
MODE_VERSION = 'version'
MODE_STATS = 'stats'
MODE_DOWNLOAD = 'download'
MODE_ENV = 'printenv'
MODE_RUN = 'run'


def main():
    # See in which "mode" the script is called. By default, it's MODE_MANAGER.
    n = len(sys.argv)
    if n > 1:
        mode = sys.argv[1]
    else:
        mode = MODE_MANAGER

    # First see if we have a working installation.
    if mode != MODE_INSTALL:
        ok = True
        for d, path in DIRS_GLOBAL.items():
            if not exists(path):
                sys.stderr.write('Missing %s folder: %s\n' % (d, path))
                ok = False
        if not exists(join(VARS['SCIPION_SOFTWARE'], 'log', 'success.log')):
            ok = False
        if not ok:
            sys.exit('There is a problem with the installation. Please run:\n'
                     '  %s install' % sys.argv[0])

    if mode == MODE_MANAGER:
        runApp('pw_manager.py')

    elif mode == MODE_LAST:
        runApp('pw_project.py', args='last')
        
    elif mode == MODE_PROJECT:
        if n > 2:
            projectName = sys.argv[2]
            runApp('pw_project.py', args=projectName)

    elif mode == MODE_WEBSERVER:
        if n > 2:
            option = sys.argv[2]
        else:
            option = 'django'

        if option == 'apache_vars':
            # WSGI needs some variables set on apache start (/etc/apache2/envvars):
            #   * SCIPION_HOME: is required to find this script, so it has to be declared "manually" in envvars
            #   * HOME: so it can reach Scipion directory
            #   * LD_LIBRARY_PATH:  set it with a call to this mode. For example,
            #       scipion_ld_library_path=$( ${SCIPION_HOME}/scipion apache_vars)
            #       export LD_LIBRARY_PATH=${scipion_ld_library_path}:${LD_LIBRARY_PATH}
            sys.stdout.write('%s\n' % VARS["LD_LIBRARY_PATH"])
            sys.exit(0)

        elif option in ['django', 'collectstatic']:
            manage = join(SCIPION_HOME, 'pyworkflow', 'web', 'manage.py')
            if option == 'django':
                args = 'runserver 0.0.0.0:8000'
            else:
                args = 'collectstatic'
            runScript('%s %s' % (manage, args))
        else:
            sys.stdout.write("\nERROR: invalid option '%s' for mode %s.\n" % (option, MODE_WEBSERVER))

    elif mode == MODE_TESTS or mode == MODE_TEST:
        if n <= 2:
            sys.exit('Missing option. Run "%s help" for a full description.'
                     % sys.argv[0])
        testValue = sys.argv[2]

        if not testValue.startswith('-'):
            # Run a single test, the one mentioned in testValue
            if testValue.startswith('tests.'):
                runScript('-m unittest pyworkflow.%s' % testValue)
            else:
                runScript('-m unittest pyworkflow.tests.%s' % testValue)
        else:
            runScript('scripts/run_tests.py %s' % ' '.join(sys.argv[2:]))

    elif mode == MODE_TEST_DATA:
        runScript('scripts/sync_data.py %s' % ' '.join(sys.argv[2:]))

    # TODO(josemiguel): review and see if we really need it.
    elif mode == MODE_DBBROWSE:
        if n > 2:
            browserArgs = " ".join(sys.argv[2:])
            runApp('pw_browser.py', args=browserArgs)

    elif mode == MODE_VIEWER:
        if n > 2:
            viewerArgs = ' '.join(sys.argv[2:])
            runApp('pw_viewer.py', args=viewerArgs)

    elif mode == MODE_INSTALL:
        # We do not os.environ.update(VARS) here. SCons needs to use
        # the python installed in the system by default.

        # But we do set SCIPION_HOME to avoid picking one from the environment.
        os.environ['SCIPION_HOME'] = SCIPION_HOME

        # Create folders if needed.
        for path in DIRS_GLOBAL.values():
            if not exists(path):
                sys.stdout.write("  Creating folder %s ...\n" % path)
                os.makedirs(path)

        args = sys.argv[2:]
        from scripts.install import build
        ret = build(args=args)
        if ret == 0 and '--help' not in args and '-h' not in args:
            open(join(VARS['SCIPION_SOFTWARE'], 'log',
                      'success.log'), 'w').write('Yes :)')
            runApp('config.py')
            # FIXME: I am not sure this is a good idea. To begin with,
            # right now it expects xmipp to be installed.
        sys.exit(ret)

    elif mode == MODE_CONFIG:
        runApp('config.py')

    elif mode == MODE_STATS:
        statsDir = join(SCIPION_HOME, 'data', 'stats')
        if not exists(statsDir):
            os.makedirs(statsDir)
        runApp('gitstats/gitstats', args='%s %s' % (SCIPION_HOME, statsDir))

    elif mode == MODE_VERSION:
        sys.stdout.write('%s\n' % __version__)
        sys.exit(0)

    elif mode == 'runprotocol':
        if n == 5:
            params = ['"%s"' % s for s in sys.argv[2:5]]
            args = ' '.join(params)
            runApp('pw_protocol_run.py', args)

    elif mode == MODE_DOWNLOAD:
        if n > 2:
            args = sys.argv[2]
        else:
            args = ''
        runApp('pw_download_packages.py', args)

    elif mode == MODE_ENV:
        # Print all the environment variables needed to run scipion.
        for k, v in VARS.items():
            sys.stdout.write('export %s="%s"\n' % (k, v))

        sys.exit(0)

    elif mode == MODE_RUN:
        # Run any command with the environment of scipion loaded
        if n > 2:
            cmd = " ".join(sys.argv[2:])
            runCmd(cmd)

    elif mode == MODE_HELP:
        sys.stdout.write("""
USAGE:
    scipion [MODE] [ARGUMENTS]
    where MODE can be:
        browser                Browser a dir or an sqlite database. (TODO: merge with viewer)

        help                   Print this help message.

        install                Create needed folders and settings to run Scipion.

        config                 Write default configuration.

        manager                Open the manager with list of all projects.

        project [PROJECT_NAME] Open the specified project, special name 'last' can be used.
        last                   Same as 'project last'

        stats                  Write git statistics to data/stats folder.

        test [OPTION]         Run a test starting from pyworkflow.tests
                               OPTION can be:
                                  <test name>: name of the test to run.
                                  --show: list the available tests.
                                  Further options are:
                                  --case=VALUE --paths=VALUE --pattern="test*py" --mode=[modules|classes|all]
                               NOTE: 'tests' is also accepted, but not recommended

        testdata [OPTION]      Synchronize tests data from/to the remote server to/from the SCIPION_TESTS folder.
                               OPTION can be:
                                  --download: copy dataset from remote location to local
                                  --upload: copy dataset from local to remote
                                  --format: create a MANIFEST file with md5 checksums (expected in dataset folders)
                                  dataset: name of dataset to download, upload or format
                                  --list: list the datasets in the local computer and in the remote server
                                  --query: Show modifications stored in last_m.txt and update modifications log file.
                                           This can be used, for example, by buildbot to know when to launch tests.
                               For example, to download the dataset xmipp_tutorial:
                                  scipion testsdata --download xmipp_tutorial
                               Or to upload it:
                                  scipion testsdata --upload xmipp_tutorial

        viewer [FILE]          Open a file with Scipion showj program.

        webserver [OPTION]     webserver management OPTION can be:
                               django: open local django webserver (default)
                               collectstatic: copy static files for django server
                               apache_vars: show the LD_LIBRARY_PATH needed by apache server

        printenv               Print the environmental variables used by the application

        download               Download external packages (EMAN, SPIDER, Relion, etc)

        run COMMAND [ARG ...]  Run command in the scipion environment
""")
        sys.exit(0)

    # If we reach this point, bad arguments were passed
    sys.stdout.write("""Unknown mode: %s
Valid modes are:
  browser help install manager project stats tests testdata viewer webserver printenv download run
Run "%s help" for a full description.\n""" % (sys.argv[1], sys.argv[0]))
    sys.exit(1)



if __name__ == '__main__':
    main()

elif __name__.startswith('_mod_wsgi'):
    os.environ['DJANGO_SETTINGS_MODULE'] = 'pages.settings'
    os.environ.update(VARS)
    # !!!! reuse VARS for these sys.path too
    sys.path.append(join(VARS['XMIPP_HOME'], 'lib'))
    sys.path.append(join(VARS['XMIPP_HOME'], 'lib', 'python2.7', 'site-packages'))
    sys.path.append(join(VARS['XMIPP_HOME'], 'protocols'))
    # sys.path.append(xmipp_home + '/applications/tests/pythonlib')

    pages_settings_path = join(SCIPION_HOME,'pyworkflow','web')
    if not pages_settings_path in sys.path:
        sys.path.append(pages_settings_path)

    import django.core.handlers.wsgi

    # default name for the function that WSGI calls is "application"
    # you can change it wsgi.conf
    application = django.core.handlers.wsgi.WSGIHandler()
