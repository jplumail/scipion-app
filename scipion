#!/usr/bin/env python
# **************************************************************************
# *
# * Authors:     J.M. De la Rosa Trevin (jmdelarosa@cnb.csic.es)
# *              I. Foche Perez (ifoche@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'jmdelarosa@cnb.csic.es'
# *
# **************************************************************************
"""
This module is responsible for launching protocol executions.
"""
import sys
import os
from os.path import join, isabs, exists
import __builtin__

__version__ = 'v.0.1.2 Magnesium'



def findHome():
    """ Find Scipion home from the __file__ location. """
    absPath = os.path.abspath(__file__)
    if os.path.islink(absPath):
        r = os.readlink(absPath)
        if not isabs(absPath):
            absPath = join(os.path.dirname(absPath), r)
        else:
            absPath = r   
    return os.path.dirname(absPath)

SCIPION_ENV = {}
SCIPION_HOME = findHome()
os.environ['SCIPION_HOME'] = SCIPION_HOME

SCIPION_ENV['SCIPION_HOME'] = SCIPION_HOME

PW_APPS = join(SCIPION_HOME, 'pyworkflow', 'apps')
PW_APPS_TEMP = join(PW_APPS, '%s')

# ensure SCIPION_HOME is available within apache, to be able to find em_packages
if not SCIPION_HOME in sys.path:
    sys.path.append(SCIPION_HOME)


import config

def getConfigPath(varName):
    """ Return the value of varName from config.py, which is a path.
    If relative, prepend SCIPION_HOME.
    """
    pathValue = getattr(config, varName)
    if not isabs(pathValue):
        pathValue = join(SCIPION_HOME, pathValue)
    return pathValue


def getUserDataPath():
    # If SCIPION_USER_DATA is None or empty in config
    # set a location by default in the user home
    if not getattr(config, 'SCIPION_USER_DATA', None):
        return join(os.environ['HOME'], 'ScipionUserData')
    return getConfigPath('SCIPION_USER_DATA')
        

XMIPP_HOME = getConfigPath('XMIPP_HOME') #os.environ['XMIPP_HOME']
XMIPP_BIN = join(XMIPP_HOME, 'bin')
XMIPP_LIB = join(XMIPP_HOME, 'lib')

if not XMIPP_LIB in sys.path:
    sys.path.append(XMIPP_LIB)

SCIPION_DIRS = {
    'SCIPION_DATA': join(SCIPION_HOME, 'data'),
    'SCIPION_LOGS': join(SCIPION_HOME, 'data', 'logs'),
    'SCIPION_TESTS': join(SCIPION_HOME, 'data', 'tests'),
    'SCIPION_USER_DATA': getUserDataPath(),
    'SCIPION_TMP': join(getUserDataPath(), 'tmp')}

SCIPION_PYTHON = join(XMIPP_BIN, 'xmipp_python')

os.environ['SCIPION_HOME'] = SCIPION_HOME
os.environ['SCIPION_PYTHON'] = SCIPION_PYTHON

SCIPION_ENV['SCIPION_HOME'] = SCIPION_HOME
SCIPION_ENV['SCIPION_PYTHON'] = SCIPION_PYTHON

for k,v in SCIPION_DIRS.iteritems():
    os.environ[k] = v
    SCIPION_ENV[k] = v

VARS = {
        'PYTHONPATH': os.pathsep.join([SCIPION_HOME, XMIPP_LIB, os.environ.get('PYTHONPATH', '')]),
        'PATH': os.pathsep.join([XMIPP_BIN, PW_APPS, os.environ['PATH']]),
        'LD_LIBRARY_PATH': os.pathsep.join([XMIPP_LIB, os.environ.get('LD_LIBRARY_PATH', '')]),
        'XMIPP_HOME': XMIPP_HOME,
        }

for var in ['SPIDER_DIR', 'EMAN2DIR', 'CTFFIND_HOME', 'FREALIGN_HOME', 
            'OPT_ALIGN_HOME', 'RELION_HOME', 'BSOFT_HOME']:
    VARS[var] = getConfigPath(var)
    
#for k,v in VARS.iteritems():
#    SCIPION_ENV[k] = v
SCIPION_ENV.update(VARS)

def runApp(app, args=''):
    runCmd('%s %s' % (PW_APPS_TEMP % app, args))

def runCmd(cmd):
    os.environ.update(VARS)
    os.chdir(SCIPION_HOME)
    cmd = '%s %s' % (SCIPION_PYTHON, cmd)
    print ">>>>>", cmd
    result = os.system(cmd)
    if not -256 < result < 256:
        result = 1  # because if not, 256 is confused with 0 !
    sys.exit(result)


MODE_MANAGER = 'manager'
MODE_PROJECT = 'project'
MODE_WEBSERVER = 'webserver'
MODE_COLLECTSTATIC = 'collectstatic'
MODE_TESTS = 'tests'
MODE_TESTS_DATA = 'testdata'
MODE_HELP = 'help'
MODE_DBBROWSE = 'browser'
MODE_VIEWER = 'viewer'
MODE_INSTALL = 'install'
MODE_APACHE_VARS = 'apache_vars'
MODE_VERSION = 'version'
MODE_STATS = 'stats'
MODE_DOWNLOAD = 'download'
MODE_ENV = 'printenv'


def main():
    n = len(sys.argv)
    if n > 1:
        mode = sys.argv[1]
    else:
        mode = MODE_MANAGER

    # Create SCIPION_HOME folder if it does not exist
    if mode != MODE_INSTALL:
        error = ''
        for d in SCIPION_DIRS:
            path = os.environ[d]
            if not exists(path):
                error += "Missing %s folder: '%s'\n" % (d, path)
        if error:
            print error + 'RUN:  scipion install'
            sys.exit(1)

    if mode == MODE_MANAGER:
        runApp('pw_manager.py')

    elif mode == MODE_PROJECT:
        if n > 2:
            projectName = sys.argv[2]
            runApp('pw_project.py', args=projectName)

    elif mode == MODE_WEBSERVER:
        if n > 2:
            option = sys.argv[2]
        else:
            option = 'django'

        if option == 'apache_vars':
            # WSGI needs some variables set on apache start (/etc/apache2/envvars):
            #   * SCIPION_HOME: is required to find this script, so it has to be declared "manually" in envvars
            #   * HOME: so it can reach Scipion directory
            #   * LD_LIBRARY_PATH:  set it with a call to this mode. For example,
            #       scipion_ld_library_path=$( ${SCIPION_HOME}/scipion apache_vars)
            #       export LD_LIBRARY_PATH=${scipion_ld_library_path}:${LD_LIBRARY_PATH}
            print VARS["LD_LIBRARY_PATH"]
            sys.exit(0)

        elif option in ['django', 'collectstatic']:
            manage = join(SCIPION_HOME, 'pyworkflow', 'web', 'manage.py')
            if option == 'django':
                args = 'runserver 0.0.0.0:8000'
            else:
                args = 'collectstatic'
            runCmd('%s %s' % (manage, args))
        else:
            print "\nERROR: invalid option '%s' for mode %s." % (option, MODE_WEBSERVER)

    elif mode == MODE_TESTS:
        if n > 2:
            testValue = sys.argv[2]

            if not testValue.startswith('-'):
                # Run a single test, the one mentioned in testValue
                if testValue.startswith('tests.'):
                    runCmd('-m unittest pyworkflow.%s' % testValue)
                else:
                    runCmd('-m unittest pyworkflow.tests.%s' % testValue)
            else:
                runCmd('scripts/run_tests.py %s' % ' '.join(sys.argv[2:]))

    elif mode == MODE_TESTS_DATA:
        runCmd('scripts/sync_data.py %s' % ' '.join(sys.argv[2:]))

    # TODO(josemiguel): review and see if we really need it.
    elif mode == MODE_DBBROWSE:
        if n > 2:
            browserArgs = " ".join(sys.argv[2:])
            runApp('pw_browser.py', args=browserArgs)

    elif mode == MODE_VIEWER:
        if n > 2:
            viewerArgs = ' '.join(sys.argv[2:])
            runApp('pw_viewer.py', args=viewerArgs)

    elif mode == MODE_INSTALL:
        global SCIPION_PYTHON
        SCIPION_PYTHON='python'
        runCmd('scripts/install.py %s' % ' '.join(sys.argv[2:]))

    elif mode == MODE_STATS:
        statsDir = join(SCIPION_HOME, 'data', 'stats')
        if not exists(statsDir):
            os.makedirs(statsDir)
        runApp('gitstats/gitstats', args='%s %s' % (SCIPION_HOME, statsDir))

    elif mode == MODE_VERSION:
        print __version__
        sys.exit(0)

    elif mode == 'runprotocol':
        if n == 5:
            params = ['"%s"' % s for s in sys.argv[2:5]]
            args = ' '.join(params)
            runApp('pw_protocol_run.py', args)

    elif mode == MODE_DOWNLOAD:
        if n > 2:
            args = sys.argv[2]
        else:
            args = ''
        runApp('pw_download_packages.py', args)
        
    elif mode == MODE_ENV:
        for k,v in SCIPION_ENV.iteritems():
            print "%s=%s" % (k, v)
            
        sys.exit(0)

    elif mode == MODE_HELP:
        print """
USAGE:
    scipion [MODE] [ARGUMENTS]
    where MODE can be:
        browser                Browser a dir or an sqlite database. (TODO: merge with viewer)

        help                   Print this help message.

        install                Create needed folders and settings to run Scipion.

        manager                Open the manager with list of all projects.

        project [PROJECT_NAME] Open the specified project, special name 'last' can be used. 

        stats                  Write git statistics to data/stats folder.

        tests [OPTION]         Run a test starting from pyworkflow.tests
                               OPTION can be:
                                  <test name>: name of the test to run.
                                  --show: list the available tests.
                                  Further options are:
                                  --case=VALUE --paths=VALUE --pattern="test*py" --mode=[modules|classes|all]

        testdata [OPTION]      Synchronize tests data from/to remote server to/from SCIPION_USER_DATA folder.
                               OPTION can be:
                                  --download: copy dataset from remote location to local
                                  --upload: copy dataset from local to remote
                                  --format: create a MANIFEST file with md5 checksums (expected in dataset folders)
                                  dataset: name of dataset to download, upload or format
                                  --list: list the datasets in the local computer and in the remote server
                                  --query: Show modifications stored in last_m.txt and update modifications log file.
                                           This can be used, for example, by buildbot to know when to launch tests.
                               For example, to download the dataset xmipp_tutorial:
                                  scipion testsdata --download xmipp_tutorial
                               Or to upload it:
                                  scipion testsdata --upload xmipp_tutorial

        viewer [FILE]          Open a file with Scipion showj program.

        webserver [OPTION]     webserver management OPTION can be:
                               django: open local django webserver (default)
                               collectstatic: copy static files for django server
                               apache_vars: show the LD_LIBRARY_PATH needed by apache server
                               
        printenv               Print the environmental variables used by the application 

        download               Download external packages (EMAN, SPIDER, Relion, etc)
"""
        sys.exit(0)

    # If we reach this point, bad arguments were passed
    print "Unknown mode: %s" % sys.argv[1]
    print ("Valid modes are: "
           "browser help install manager project stats tests testdata viewer webserver printenv download")
    print 'Run "%s help" for a full description.' % sys.argv[0]
    sys.exit(1)



if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        sys.exit(str(e))
elif __name__.startswith('_mod_wsgi'):
    os.environ['DJANGO_SETTINGS_MODULE'] = 'pages.settings'
    os.environ.update(VARS)
    # !!!! reuse VARS for these sys.path too
    sys.path.append(join(XMIPP_HOME, 'lib'))
    sys.path.append(join(XMIPP_HOME, 'lib', 'python2.7', 'site-packages'))
    sys.path.append(join(XMIPP_HOME, 'protocols'))
    # sys.path.append(xmipp_home + '/applications/tests/pythonlib')

    pages_settings_path = join(SCIPION_HOME,'pyworkflow','web')
    if not pages_settings_path in sys.path:
        sys.path.append(pages_settings_path)
    
    import django.core.handlers.wsgi
    
    # default name for the function that WSGI calls is "application"
    # you can change it wsgi.conf
    application = django.core.handlers.wsgi.WSGIHandler()
