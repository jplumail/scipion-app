#!/usr/bin/env python
# **************************************************************************
# *
# * Authors:     J.M. De la Rosa Trevin (jmdelarosa@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'jmdelarosa@cnb.csic.es'
# *
# **************************************************************************
"""
This module is responsible for launching protocol executions.
"""
import sys
import os
from os.path import join, isabs, exists
import __builtin__

__version__ = 'v.0.1.2 Magnesium'

def findHome():
    """ Find Scipion home from the __file__ location. """
    absPath = os.path.abspath(__file__)
    if os.path.islink(absPath):
        r = os.readlink(absPath)
        if not isabs(absPath):
            absPath = join(os.path.dirname(absPath), r)
        else:
            absPath = r   
    return os.path.dirname(absPath)

SCIPION_HOME = findHome()
os.environ['SCIPION_HOME'] = SCIPION_HOME
PW_APPS = join(SCIPION_HOME, 'pyworkflow', 'apps')
PW_APPS_TEMP = join(PW_APPS, '%s')

# ensure SCIPION_HOME is available within apache, to be able to find em_packages
if not SCIPION_HOME in sys.path:
    sys.path.append(SCIPION_HOME)

import config

def getConfigPath(varName):
    """ Read a path from the config.py, if is relative, 
    append the SCIPION_HOME prefix. 
    """
    pathValue = getattr(config, varName)
    if not isabs(pathValue):
        pathValue = join(SCIPION_HOME, pathValue)
    return pathValue

def getUserDataPath():
    # If SCIPION_USER_DATA is None or empty in config
    # set a location by default in the user home
    if not getattr(config, 'SCIPION_USER_DATA', None):
        return join(os.environ['HOME'], 'ScipionUserData')
    return getConfigPath('SCIPION_USER_DATA')
        

XMIPP_HOME = getConfigPath('XMIPP_HOME') #os.environ['XMIPP_HOME']
XMIPP_BIN = join(XMIPP_HOME, 'bin')
XMIPP_LIB = join(XMIPP_HOME, 'lib')

SCIPION_HOME = os.environ.get('SCIPION_HOME', join(os.environ['HOME'], 'Scipion'))
SCIPION_USER_DATA = getUserDataPath()
SCIPION_PYTHON = join(XMIPP_BIN, 'xmipp_python')

os.environ['SCIPION_HOME'] = SCIPION_HOME
os.environ['SCIPION_USER_DATA'] = SCIPION_USER_DATA
os.environ['SCIPION_PYTHON'] = SCIPION_PYTHON

VARS = {
        'PYTHONPATH': os.pathsep.join([SCIPION_HOME, XMIPP_LIB, os.environ.get('PYTHONPATH', '')]),
        'PATH': os.pathsep.join([PW_APPS, os.environ['PATH'], XMIPP_BIN]),
        'LD_LIBRARY_PATH': os.pathsep.join([XMIPP_LIB, os.environ.get('LD_LIBRARY_PATH', '')]),
        'XMIPP_HOME': XMIPP_HOME,
        }

for var in ['SPIDER_DIR', 'EMAN2DIR', 'CTFFIND_HOME', 'FREALIGN_HOME', 'OPT_ALIGN_HOME']:
    VARS[var] = getConfigPath(var)

def runApp(app, args=''):
    cmd = PW_APPS_TEMP % app + ' ' + args
    runCmd(cmd)
    
def runCmd(cmd):
    os.environ.update(VARS)
    cmd = '%s %s' % (SCIPION_PYTHON, cmd)
    print ">>>>>", cmd
    result = os.system(cmd)
    sys.exit(result)


MODE_MANAGER = 'manager'
MODE_PROJECT = 'project'
MODE_WEBSERVER = 'webserver'
MODE_COLLECTSTATIC = 'collectstatic'
MODE_TESTS = 'tests'
MODE_TESTS_DATA = 'testdata'
MODE_HELP = 'help'
MODE_DBBROWSE = 'browser'
MODE_VIEWER = 'viewer'
MODE_INSTALL = 'install'
MODE_APACHE_VARS = 'apache_vars'
MODE_VERSION = 'version'


if __name__ == '__main__':
    n = len(sys.argv)
    if n:
        mode = MODE_MANAGER
            
        if n > 1:
            mode = sys.argv[1]
        
        # Create SCIPION_HOME folder if not exists
        if mode != MODE_INSTALL and not exists(SCIPION_USER_DATA):
            print "ERROR: SCIPION_USER_DATA='%s' folder doesn't exists" % SCIPION_USER_DATA
            print "  RUN: scipion install"
            sys.exit(1)
            
        if mode == MODE_MANAGER:
            runApp('pw_manager.py')
        
        elif mode == MODE_PROJECT:
            if n > 2:
                projectName = sys.argv[2]
                runApp('pw_project.py', args=projectName)
        
        elif mode == MODE_WEBSERVER:
            manage = join(SCIPION_HOME, 'pyworkflow', 'web', 'manage.py')
            runCmd('%s runserver 0.0.0.0:8000 ' % manage)
            
        elif mode == MODE_APACHE_VARS:
            # WSGI needs some variables set on apache start (/etc/apache2/envvars):
            #   * SCIPION_HOME: is required to find this script, so it has to be declared "manually" in envvars
            #   * HOME: so it can reach Scipion directory
            #   * LD_LIBRARY_PATH:  set it with a call to this mode. For example,
            #       scipion_ld_library_path=$( ${SCIPION_HOME}/scipion apache_vars)
            #       export LD_LIBRARY_PATH=${scipion_ld_library_path}:${LD_LIBRARY_PATH}
            print VARS["LD_LIBRARY_PATH"]
            sys.exit(0)

        elif mode == MODE_COLLECTSTATIC:
            manage = join(SCIPION_HOME, 'pyworkflow', 'web', 'manage.py')
            runCmd('%s collectstatic' % manage)
            
        elif mode == MODE_TESTS:
            if n > 2:
                tests = sys.argv[2]
                if tests == "show": # only show available tests
                    f = open(join(SCIPION_HOME, 'scripts', 'batch_tests'))
                    for l in f:
                        print l.strip()
                    f.close()
                    sys.exit(0)
                else: # run the desired test
                    path = os.getcwd()
                    os.chdir(SCIPION_HOME)
                    runCmd('-m unittest pyworkflow.tests.%s' % tests)
                    os.chdir(path)
                    
        elif mode == MODE_TESTS_DATA:
            runCmd('scripts/sync_data.py')
            
        elif mode == MODE_DBBROWSE:
            if n > 2:
                browserArgs = " ".join(sys.argv[2:])
                runApp('pw_browser.py', args=browserArgs)
             
        elif mode == MODE_VIEWER:
            if n > 2:
                viewerArgs = ' '.join(sys.argv[2:])
                runApp('pw_viewer.py', args=viewerArgs)  
             
                
        elif mode == MODE_INSTALL:
            runCmd('scripts/install.py')
            
        elif mode == MODE_VERSION:
            print __version__
            sys.exit(0)
                
    # If reach this point, bad arguments passed
    print """
Usage: 
    scipion [MODE] [ARGUMENTS]
    where MODE can be:
        manager : open the manager with list of all projects
        project [PROJECT_NAME] : will open the specified project, special name 'last' can be used.  
        webserver : will launch django webserver
        tests :  will run the tests starting from pyworkflow.tests
            special case "show" will list all possible tests.
        help : print this help message
"""

elif __name__.startswith('_mod_wsgi'):
    os.environ['DJANGO_SETTINGS_MODULE'] = 'pages.settings'
    os.environ.update(VARS)
    # !!!! reuse VARS for these sys.path too
    sys.path.append(join(XMIPP_HOME, 'lib'))
    sys.path.append(join(XMIPP_HOME, 'lib', 'python2.7', 'site-packages'))
    sys.path.append(join(XMIPP_HOME, 'protocols'))
    # sys.path.append(xmipp_home + '/applications/tests/pythonlib')

    pages_settings_path = join(SCIPION_HOME,'pyworkflow','web')
    if not pages_settings_path in sys.path:
        sys.path.append(pages_settings_path)
    
    import django.core.handlers.wsgi
    
    # default name for the function that WSGI calls is "application"
    # you can change it wsgi.conf
    application = django.core.handlers.wsgi.WSGIHandler()

